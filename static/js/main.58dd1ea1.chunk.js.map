{"version":3,"sources":["Components/DropdownInput.js","Components/ErrorScreen.js","Components/InfoBox.js","Components/LoadingScreen.js","Components/NavArrowButton.js","Components/SearchBar.js","Utils/StringFunctions.js","Classes/Pokemon.js","Services/PokemonAPI.js","Pages/Pokedex.js","App.js","serviceWorker.js","index.js"],"names":["DropdownInput","props","choices","keyPrefix","label","setValue","value","useState","map","v","text","choicesState","useEffect","className","onChange","e","target","i","key","ErrorScreen","evalFunction","message","InfoBox","title","content","LoadingScreen","NavArrowButton","modifier","set","currentVal","limitValue","condition","onClick","SearchBar","inputElement","buttonText","placeholder","type","onclick","ref","input","capitalizeString","string","toUpperCase","substring","toLocaleLowerCase","capitalizeAllWords","split","word","join","replaceAll","replacedSubstring","newSubstring","substrings","replacedString","length","useAorAn","firstLetter","toLowerCase","startsWithVogal","Pokemon","reqObj","this","_info","typeImages","normal","fighting","flying","poison","ground","rock","bug","ghost","steel","fire","water","grass","electric","psychic","ice","dragon","dark","fairy","language","name","species","names","includes","pokemon","id","threeDigitId","types","img","stats","result","forEach","obj","base_stat","stat","push","entries","flavor_text_entries","flavor_text","version","getAllPokedexEntries","sorted","moveNames","moves","move","version_group_details","group","gameGroupName","version_group","move_learn_method","method","level","level_learned_at","Object","keys","sort","a","b","hasPreEvolution","evolves_from_species","url","getImage","thisPokemon","loop","root","evolves_to","evolutionLine","chain","methodByName","evolution_details","p","pName","path","trigger","getEvolutions","base_url","Pokedex","defaultPokemonState","image","hasEvolution","evolution","evolution_method","minor","pokemonNamesList","set_pokemonNamesList","pokemonInfo","set_pokemonInfo","gameSelectValue","set_gameSelectValue","evolutionNav","set_evolutionNav","isLoading","set_isLoading","major","hasError","set_hasError","searchPokemon","searchValue","pokemonId","onStart","onSuccess","onError","Promise","all","superagent","get","then","pokemonRes","speciesRes","body","evolution_chain","res","catch","err","statusCode","getPokemon","list","nameOrNum","isNaN","num","resultId","endInLength","findName","slice","findPokemon","data","getDisplayName","getMoves","preEvolution","getPreEvolution","getTypes","getEvolutionTriggers","getStats","height","weight","shape","generation","habitat","console","log","results","getNamesList","src","alt","details_renderInfoBox","toString","currentValue","pokemonDetails","index","pokemonMoveList","conditionToShow","conditionToWork","pokemonSearchBar","errMessage","error","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.58dd1ea1.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nexport default function DropdownInput(props) {\r\n    var {choices = [], keyPrefix = '', label='', setValue, value} = props;\r\n\r\n    const [ choicesState, set_choicesState ] = useState(\r\n        choices.map((v) => {\r\n        if(typeof v === 'object') return v;\r\n\r\n        return {text: v, value: v};\r\n    }));\r\n\r\n    useEffect(() => {\r\n        setValue(choicesState[0].value);\r\n    }, [choicesState]);\r\n\r\n    function onChange(e) {\r\n        setValue(e.target.value);\r\n    }\r\n\r\n    return (\r\n        <div className='dropdownInput'>\r\n            {label !== '' ? <label>{label}</label> : null}\r\n            <select value={value} onChange={onChange}>\r\n                {\r\n                    choicesState.map((v, i) => {\r\n                        return <option value={v.value} key={`${keyPrefix}_${i}`}>{v.text}</option>\r\n                    })\r\n                }\r\n            </select>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\n\r\nexport default function ErrorScreen(props) {\r\n    var { \r\n        evalFunction = () => {},\r\n        message = \"Oops, couldn't find that Pokémon.\"\r\n    } = props;\r\n\r\n    return (\r\n        evalFunction() ?\r\n        <div className='error'>\r\n            <h1>{message}</h1>\r\n        </div>\r\n        : null\r\n    )\r\n}","import React from 'react';\r\nimport './InfoBox.css';\r\n\r\nexport default function InfoBox(props) {\r\n    const { title = 'Title', content = null, className = '' } = props;\r\n\r\n    return (\r\n        <div className={`infoBox ${className}`}>\r\n            <div className='titleArea'>\r\n                <h3>{title}</h3>\r\n            </div>\r\n            <div className='contentArea'>\r\n                {\r\n                    content\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\n\r\nexport default function LoadingScreen(props) {\r\n    var { evalFunction } = props;\r\n\r\n    return (\r\n        evalFunction() ?\r\n            <div className='loading'>\r\n                <h1>Loading...</h1>\r\n            </div>\r\n        : null\r\n    )\r\n}","import React from 'react';\r\n\r\nexport default function NavArrowButton(props) {\r\n    var { \r\n        modifier = 1,\r\n        set = () => {},\r\n        currentVal = 0,\r\n        limitValue = 0,\r\n        text = ''\r\n    } = props;\r\n\r\n    var condition = (\r\n    modifier > 0 ? \r\n    currentVal < limitValue : \r\n    currentVal > limitValue);\r\n\r\n    if(text === '') {\r\n        text = modifier > 0 ? '>' : '<';\r\n    }\r\n\r\n    return (\r\n        <button \r\n        className={condition ? 'navButton navButtonActive' : 'navButton navButtonInactive'}\r\n        onClick={condition ?\r\n        () => {\r\n            set(currentVal + modifier);\r\n        }\r\n        : () => {}}\r\n        >\r\n        {text}\r\n        </button>\r\n    );\r\n}","//================================================================================\r\n// External:                                                                      \r\n//================================================================================\r\nimport React from 'react';\r\n\r\n//================================================================================\r\n// Components:                                                                    \r\n//================================================================================\r\nexport default function SearchBar(props) {\r\n    var {\r\n        buttonText = '', \r\n        placeholder = '', \r\n        type = 'text', \r\n        onclick = () => {}\r\n    } = props;\r\n\r\n    var inputElement;\r\n\r\n    function handleInputRef(input) {\r\n        inputElement = input;\r\n    }\r\n\r\n    return (\r\n        <div className='searchBar'>\r\n            <input \r\n            ref={handleInputRef}\r\n            placeholder={placeholder} \r\n            type={type}\r\n            />\r\n\r\n            <button onClick={() => {onclick(inputElement.value)}}>{buttonText}</button>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n","\r\nexport function capitalizeString(string = '') {\r\n    return string[0].toUpperCase() + string.substring(1).toLocaleLowerCase();\r\n}\r\n\r\nexport function capitalizeAllWords(string = '') {\r\n    return string.split(' ').map(word => capitalizeString(word)).join(' ');\r\n}\r\n\r\nexport function replaceAll(string = '', replacedSubstring, newSubstring) {\r\n    let substrings = string.split(replacedSubstring);\r\n    let replacedString = substrings[0];\r\n    for(var i = 1; i < substrings.length; i++) {\r\n        replacedString += newSubstring + substrings[i];\r\n    }\r\n    return replacedString;\r\n}\r\n\r\nexport function startsWithVogal(string) {\r\n    let firstLetter = string[0].toLowerCase();\r\n    \r\n    return (\r\n    firstLetter === 'a' ||\r\n    firstLetter === 'e' ||\r\n    firstLetter === 'i' ||\r\n    firstLetter === 'o' ||\r\n    firstLetter === 'u'\r\n    );\r\n}\r\n\r\nexport function useAorAn(string) {\r\n    if(startsWithVogal(string)) {\r\n        return 'an';\r\n    }\r\n\r\n    return 'a';\r\n}\r\n","//================================================================================\r\n// Utils:\r\n//================================================================================\r\nimport {capitalizeString, replaceAll, capitalizeAllWords, useAorAn} from '../Utils/StringFunctions';\r\n\r\nexport default class Pokemon {\r\n    constructor(reqObj) {\r\n        this._info = reqObj;\r\n        this.typeImages = {\r\n            normal: 'https://i.ibb.co/PF7wYJf/normal.png',\r\n            fighting: 'https://i.ibb.co/H7btCrQ/fighting.png',\r\n            flying: 'https://i.ibb.co/Bzv4DXk/flying.png',\r\n            poison: 'https://i.ibb.co/Rggf4h3/poison.png',\r\n            ground: 'https://i.ibb.co/FV5vh7D/ground.png',\r\n            rock: 'https://i.ibb.co/68rn0M7/rock.png',\r\n            bug: 'https://i.ibb.co/0hTtRns/bug.png', \r\n            ghost: 'https://i.ibb.co/K0tnCXb/ghost.png',\r\n            steel: 'https://i.ibb.co/6B849X5/steel.png',\r\n            fire: 'https://i.ibb.co/pdFQyQs/fire.png',\r\n            water: 'https://i.ibb.co/nCfgkps/water.png',\r\n            grass: 'https://i.ibb.co/DbPbyYy/grass.png',\r\n            electric: 'https://i.ibb.co/FnmvSFR/electric.png',\r\n            psychic: 'https://i.ibb.co/Mg3PzvN/psychic.png',\r\n            ice: 'https://i.ibb.co/Tk60FRM/ice.png',\r\n            dragon: 'https://i.ibb.co/tJjkNFG/dragon.png',\r\n            dark: 'https://i.ibb.co/0JT9CqP/dark.png',\r\n            fairy: 'https://i.ibb.co/gStBvMm/fairy.png',\r\n        }\r\n    }\r\n\r\n    getDisplayName(language = 'en') {\r\n        let name = capitalizeAllWords(replaceAll(this._info.species.name, '-', ' '));\r\n\r\n        if(language !== 'en') {\r\n            for(let i = 0; i < this._info.species.names.length; i++) {\r\n                if(this._info.species.names[i].language.name.includes(language)) {\r\n                    name = this._info.species.names[i].name;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        return capitalizeString(`${name} (${this._info.pokemon.id})`);\r\n    }\r\n\r\n    getImage(id = this._info.pokemon.id) {\r\n        if(id <= 807) {\r\n            let threeDigitId = '' + id;\r\n            while(threeDigitId.length < 3)\r\n            {\r\n                threeDigitId = '0' + threeDigitId;\r\n            }\r\n            return `https://raw.githubusercontent.com/HybridShivam/Pokemon/master/assets/images/${threeDigitId}.png`;\r\n        }\r\n\r\n        return `https://cdn.traction.one/pokedex/pokemon/${id}.png`;\r\n    }\r\n\r\n    getTypes() {\r\n        return this._info.pokemon.types.map((v) => {\r\n            return { name: v.type.name, img: this.typeImages[v.type.name] };\r\n        })\r\n    }\r\n\r\n    getStats() {\r\n        let stats = this._info.pokemon.stats;\r\n        let result = [{}];\r\n\r\n        stats.forEach((v) => {\r\n            let obj = {};\r\n            obj.name = '';\r\n            obj.value = v.base_stat;\r\n\r\n            switch(v.stat.name) {\r\n                case 'hp':\r\n                    obj.name = 'HP';\r\n                    break;\r\n\r\n                case 'attack':\r\n                    obj.name = 'ATK';\r\n                    break;\r\n\r\n                case 'defense':\r\n                    obj.name = 'DEF';\r\n                    break;\r\n\r\n                case 'special-attack':\r\n                    obj.name = 'S.ATK';\r\n                    break;\r\n\r\n                case 'special-defense':\r\n                    obj.name = 'S.DEF';\r\n                    break;\r\n\r\n                case 'speed':\r\n                    obj.name = 'SPD';\r\n                    break;\r\n            }\r\n\r\n            if(v.stat.name !== 'hp') {\r\n                result.push(obj);\r\n            } else {\r\n                result[0] = obj;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    getAllPokedexEntries(language = 'en') {\r\n        let entries = [];\r\n\r\n        for(let i = 0; i < this._info.species.flavor_text_entries.length; i++) {\r\n            if(this._info.species.flavor_text_entries[i].language.name.includes(language)) {\r\n                \r\n                entries.push(replaceAll(replaceAll(this._info.species.flavor_text_entries[i].flavor_text, '\\f', ' '), '\\n', ' ') \r\n                + ` (${capitalizeAllWords(replaceAll(this._info.species.flavor_text_entries[i].version.name, '-', ' '))})`);\r\n            }\r\n        }\r\n\r\n        if(entries.length === 0) return this.getAllPokedexEntries('en');\r\n\r\n        return entries;   \r\n    }\r\n\r\n    // Objective: Loop through the moves and if they are adquired by leveling up and haven't\r\n    // already been added to the list, add them to the list. Loop through the list again, now\r\n    // adding the other types and making sure not to repeat them.\r\n\r\n    // Structure: Container Object => Game Group Object => Learning Method Array => Move Object {level, name}.\r\n    getMoves() {\r\n\r\n        let sorted = {};\r\n        let moveNames = {};\r\n\r\n        this._info.pokemon.moves.forEach((move) => {\r\n            \r\n            move.version_group_details.forEach((group) => {\r\n\r\n                let gameGroupName = capitalizeAllWords(replaceAll(group.version_group.name, '-', ' '));\r\n                let name = capitalizeAllWords(replaceAll(move.move.name, '-', ' '));\r\n                moveNames[gameGroupName] = moveNames[gameGroupName] || [];\r\n\r\n                if(group.move_learn_method.name === 'level-up' && !moveNames[gameGroupName].includes(name)) {\r\n                    \r\n                    let method = capitalizeAllWords(replaceAll(group.move_learn_method.name, '-', ' '));\r\n                    let level = group.level_learned_at;\r\n\r\n                    if(level < 1) {\r\n                        level = 1;\r\n                    }\r\n\r\n                    sorted[gameGroupName] = sorted[gameGroupName] || {};\r\n                    sorted[gameGroupName][method] = sorted[gameGroupName][method] || [];\r\n                    sorted[gameGroupName][method].push({name, level});\r\n                    moveNames[gameGroupName].push(name);\r\n                }\r\n            });\r\n        });\r\n\r\n        this._info.pokemon.moves.forEach((move) => {\r\n            \r\n            move.version_group_details.forEach((group) => {\r\n\r\n                let gameGroupName = capitalizeAllWords(replaceAll(group.version_group.name, '-', ' '));\r\n                let name = capitalizeAllWords(replaceAll(move.move.name, '-', ' '));\r\n                moveNames[gameGroupName] = moveNames[gameGroupName] || [];\r\n\r\n                if(!moveNames[gameGroupName].includes(name)) {\r\n                    \r\n                    let method = capitalizeAllWords(replaceAll(group.move_learn_method.name, '-', ' '));\r\n\r\n                    sorted[gameGroupName] = sorted[gameGroupName] || {};\r\n                    sorted[gameGroupName][method] = sorted[gameGroupName][method] || [];\r\n                    sorted[gameGroupName][method].push({name});\r\n                    moveNames[gameGroupName].push(name);\r\n                }\r\n\r\n            });\r\n        });\r\n\r\n        Object.keys(sorted).forEach((group) => {\r\n            if(!sorted[group][\"Level Up\"]) return;\r\n\r\n            sorted[group][\"Level Up\"].sort((a, b) => {\r\n                return a.level - b.level;\r\n            })\r\n        });\r\n\r\n        return sorted;\r\n    }\r\n\r\n    getPreEvolution() {\r\n        let url_base = \"https://pokeapi.co/api/v2/pokemon-species/\"\r\n\r\n        if(this.hasPreEvolution()) {\r\n            let name = this._info.species.evolves_from_species.name;\r\n            let id = +this._info.species.evolves_from_species.url.split(url_base)[1].split('/')[0];\r\n            let img = this.getImage(id);\r\n\r\n            return {name, id, img};\r\n        }\r\n\r\n        return {name: '', id: 0, img: ''};\r\n    }\r\n\r\n    getEvolutions() {\r\n        let thisPokemon;\r\n        \r\n        function loop(root, name) {\r\n\r\n            if(name === root.species.name) {\r\n                thisPokemon = root;\r\n                return;\r\n            } else {\r\n                root.evolves_to.forEach((v) => {\r\n                    loop(v, name);\r\n                });\r\n            }\r\n        }\r\n\r\n        loop(this._info.evolutionLine.chain, this._info.species.name);\r\n\r\n        if(thisPokemon.evolves_to.length === 0) {\r\n            return [];\r\n        }\r\n\r\n        return thisPokemon.evolves_to.map((v) => {\r\n            let url_base = \"https://pokeapi.co/api/v2/pokemon-species/\";\r\n\r\n            let name = v.species.name;\r\n            let id = +v.species.url.split(url_base)[1].split('/')[0];\r\n            let img = this.getImage(id);\r\n\r\n            return {name, id, img};\r\n        });\r\n    }\r\n\r\n    getEvolutionTriggers() {\r\n        let methodByName = {};\r\n\r\n        function loop(root) {\r\n            methodByName[root.species.name] = [];\r\n\r\n            if(root.evolution_details.length > 0) {\r\n                Object.keys(root.evolution_details[0]).forEach((v) => {\r\n                    let p = root.evolution_details[0][v];\r\n                    let text = '';\r\n\r\n                    function pName(path = p.name) {\r\n                        return capitalizeAllWords(replaceAll(path, '-', ' '));\r\n                    }\r\n\r\n                    if(!(p === null || p === false || p === '')) {\r\n                        switch(v) {\r\n                            case 'gender': \r\n                            let gender = p === 1 ? 'female' : 'male';\r\n                            text = `Must be ${gender}.`;\r\n                            break;\r\n\r\n                            case 'held_item':\r\n                            text = `Must be holding ${pName()}.`;\r\n                            break;\r\n\r\n                            case 'item':\r\n                            text = `Must use ${pName()}.`;\r\n                            break;\r\n\r\n                            case 'known_move':\r\n                            text = `Must know the move: ${pName()}.`;\r\n                            break;\r\n\r\n                            case 'known_move_type':\r\n                            text = `Must know a ${pName()}-Type move.`;\r\n                            break;\r\n\r\n                            case 'location':\r\n                            text = `Must be at ${pName()}.`;\r\n                            break;\r\n\r\n                            case 'min_affection':\r\n                            text = `Must have at least ${p} affection points.`;\r\n                            break;\r\n\r\n                            case 'min_beauty':\r\n                            text = `Must have at least ${p} beauty points.`;\r\n                            break;\r\n\r\n                            case 'min_happiness':\r\n                            text = `Must have at least ${p} happiness points.`;\r\n                            break;\r\n\r\n                            case 'min_level':\r\n                            text = `Must be at least level ${p}.`;\r\n                            break;\r\n\r\n                            case 'needs_overworld_rain':\r\n                            text = `Must be raining.`;\r\n                            break;\r\n\r\n                            case 'party_species':\r\n                            text = `Must have ${useAorAn(pName())} ${pName()} in your party.`;\r\n                            break;\r\n\r\n                            case 'party_type':\r\n                            text = `Must have ${useAorAn(pName())} ${pName()}-Type Pokemon in your party.`;\r\n                            break;\r\n\r\n                            case 'relative_physical_stats':\r\n                            switch(p) {\r\n                                case -1:\r\n                                text = `Defense must be higher than attack.`;\r\n                                break;\r\n\r\n                                case 0:\r\n                                text = `Attack and defense must be equal.`;\r\n                                break;\r\n\r\n                                case 1:\r\n                                text = `Attack must be higher than defense.`;\r\n                                break;\r\n                            }\r\n                            break;\r\n\r\n                            case 'time_of_day':\r\n                            text = `Must be during the ${p}.`;\r\n                            break;\r\n\r\n                            case 'trade_species':\r\n                            text = `Must be traded by ${useAorAn(pName())} ${pName()}.`;\r\n                            break;\r\n\r\n                            case 'turn_upside_down':\r\n                            text = `Must turn the device upside down.`;\r\n                            break;\r\n\r\n                            case 'trigger':\r\n                            let trigger = '';\r\n\r\n                            switch (p.name) {\r\n                                case 'level-up':\r\n                                trigger = 'leveling up the pokemon';\r\n                                break;\r\n\r\n                                case 'use-item':\r\n                                trigger = 'using the specified item on the pokemon';\r\n                                break;\r\n\r\n                                case 'trade':\r\n                                trigger = 'trading this pokemon with another trainer'\r\n                                break;\r\n\r\n                                default:\r\n                                trigger = pName();\r\n                                break;\r\n                            }\r\n\r\n                            text = `The evolution is triggered by ${trigger}.`;\r\n                            break;\r\n\r\n                        }\r\n                        methodByName[root.species.name].push(text);\r\n                    }\r\n                });\r\n            }\r\n\r\n            root.evolves_to.forEach((v) => {\r\n                loop(v);\r\n            });\r\n        }\r\n\r\n        loop(this._info.evolutionLine.chain, this._info.pokemon.name);\r\n\r\n        return methodByName;\r\n    }\r\n\r\n    hasPreEvolution() {\r\n        return !!this._info.species.evolves_from_species;\r\n    }\r\n\r\n    hasEvolution() {\r\n        return this.getEvolutions().length > 0;\r\n    }\r\n\r\n\r\n}","//================================================================================\r\n// External:                                                                      \r\n//================================================================================\r\nimport superagent from 'superagent';\r\n\r\n//================================================================================\r\n// Components:                                                                    \r\n//================================================================================\r\nimport MF from '../Utils/MathFunctions.js';\r\n\r\n//================================================================================\r\n// Classes:\r\n//================================================================================\r\nimport Pokemon from '../Classes/Pokemon.js';\r\n\r\n//================================================================================\r\n// Consts and Vars:                                                               \r\n//================================================================================\r\nconst base_url = 'https://pokeapi.co/api/v2/';\r\nconst base_url_v1 = 'https://pokeapi.glitch.me/v1/';\r\nconst pokemon_url = 'pokemon/';\r\nconst species_url = 'pokemon-species/';\r\nconst last_pokemon = 894;\r\n\r\n//================================================================================\r\n// Functions:                                                                     \r\n//================================================================================\r\n\r\n// Gets a Pokémon based on name or national ID. Takes four arguments: the\r\n// first one is the name/id of the pokemon, the second is a callback that\r\n// will be executed before everything else, the third is a callback that\r\n// will be executed in case of success, and the last is also a callback\r\n// function that will be executed in case of error(s).\r\nexport function getPokemon(pokemonId, onStart = () => {}, onSuccess = () => {}, onError = () => {}) {\r\n    onStart();\r\n\r\n    let pokemon, species;\r\n\r\n    Promise.all([\r\n        superagent.get(base_url + pokemon_url + pokemonId), \r\n        superagent.get(base_url + species_url + pokemonId)\r\n    ])\r\n    .then(([pokemonRes, speciesRes]) => {\r\n        pokemon = pokemonRes.body;\r\n        species = speciesRes.body;\r\n        return superagent.get(species.evolution_chain.url);\r\n    })\r\n    .then((res) => {\r\n        let evolutionLine = res.body;\r\n        onSuccess(new Pokemon({pokemon, species, evolutionLine}));\r\n    })\r\n    .catch((err) => {\r\n        onError(err.statusCode);\r\n    });\r\n}\r\n\r\n// Gets a list with the names of all Pokemons\r\nexport function getNamesList(onSuccess = () => {}, onError = () => {}) {\r\n    superagent.get(base_url + `pokemon?limit=${last_pokemon}`).then((res) => {\r\n        onSuccess(res.body.results);\r\n    }).catch((err) => {\r\n        onError(err);\r\n    });\r\n}\r\n\r\n// Tries to find a Pokemon based on user input, returns the Pokemon\r\n// id if found, else returns 0, a number that will give an error on\r\n// the getPokemon function.\r\nexport function findPokemon(list, nameOrNum) {\r\n    //Defines if it is a number or name\r\n    let isNumber = !isNaN(nameOrNum);\r\n\r\n    if(isNumber) {\r\n        let num = +nameOrNum;\r\n\r\n        // Checks if it's a valid Pokémon id\r\n        if(num <= last_pokemon) {\r\n            return num;\r\n        }\r\n\r\n        // It wasn't valid, return 0 will give an error in the search\r\n        return 0;\r\n    }\r\n\r\n    // If isn't a number this will happen\r\n    let name = '' + nameOrNum;\r\n    let resultId = 0;\r\n\r\n    // Loop through the list of names to see if the names are exactly\r\n    // equal, if they are, change the value of resultId from 0 to the\r\n    // Pokemon's id\r\n    list.forEach((v, id) => {\r\n        if(name === v.name) {\r\n            resultId = id + 1;\r\n        }\r\n    });\r\n    \r\n    // If the Pokemon was found, then return the resultId\r\n    if(resultId !== 0) {\r\n        return resultId;\r\n    }\r\n\r\n    let endInLength = (\r\n        name.length < 4 ?\r\n        name.length : 4\r\n    )\r\n\r\n    // Each time this loop repeats, it looks the names array to see if\r\n    // they have a value that at least includes the value given by the\r\n    // user. Each time nothing was found, the last character of the\r\n    // string is removed and the process is repeated, but when the\r\n    // string has less than 4 characters the loop won't repeat.\r\n    for(var i = name.length; i >= endInLength; i--) {\r\n        let findName = name.slice(0, i);\r\n        list.forEach((v, id) => {\r\n            if(v.name.includes(findName) && resultId === 0) {\r\n                resultId = id + 1;\r\n            } \r\n        });\r\n        if(resultId !== 0) {\r\n            break;\r\n        }\r\n    }\r\n\r\n    // At this point, if no valid result was found, 0 will be returned.\r\n    // But if the loop actually found something, this value will be \r\n    // returned instead.\r\n    return resultId;\r\n}","import './Pokedex.css';\r\n\r\n//================================================================================\r\n// External:                                                                      \r\n//================================================================================\r\nimport React, { useState, useEffect } from 'react';\r\n\r\n//================================================================================\r\n// Components:                                                                    \r\n//================================================================================\r\nimport DropdownInput from '../Components/DropdownInput.js';\r\nimport ErrorScreen from '../Components/ErrorScreen.js';\r\nimport InfoBox from '../Components/InfoBox.js';\r\nimport LoadingScreen from '../Components/LoadingScreen.js';\r\nimport NavArrowButton from '../Components/NavArrowButton.js';\r\nimport SearchBar from '../Components/SearchBar.js';\r\n\r\n//================================================================================\r\n// Services:                                                                      \r\n//================================================================================\r\nimport { getPokemon, getNamesList, findPokemon, checkImageExistence } from '../Services/PokemonAPI.js';\r\n\r\n//================================================================================\r\n// Utils:                                                                         \r\n//================================================================================\r\nimport { capitalizeString, replaceAll, capitalizeAllWords } from '../Utils/StringFunctions.js';\r\n\r\nexport default function Pokedex() {\r\n    const defaultPokemonState = { \r\n        name: '', \r\n        image: '', \r\n        entries: [], \r\n        moves: {}, \r\n        hasPreEvolution: false, \r\n        hasEvolution: false, \r\n        evolution: [],\r\n        types: [],\r\n        evolution_method: {},\r\n        stats: [],\r\n        minor: {}\r\n    }\r\n    const [pokemonNamesList, set_pokemonNamesList] = useState([]);\r\n    const [pokemonInfo, set_pokemonInfo] = useState(defaultPokemonState);\r\n    const [gameSelectValue, set_gameSelectValue] = useState('');\r\n    const [evolutionNav, set_evolutionNav] = useState(0);\r\n    const [isLoading, set_isLoading] = useState(true);\r\n    const [hasError, set_hasError] = useState({minor: false, major: false});\r\n\r\n    useEffect(() => {\r\n        getNamesList(\r\n        (list) => {\r\n            set_pokemonNamesList(list);\r\n            set_isLoading(false);\r\n        }, \r\n        (err) => {\r\n            set_isLoading(false);\r\n            set_hasError({minor: false, major: true});\r\n        })\r\n    }, [])\r\n\r\n    // Called to change the current Pokémon page\r\n    function searchPokemon(searchValue) {\r\n        let searchId = findPokemon(\r\n            pokemonNamesList, \r\n            replaceAll(searchValue.toLowerCase(), ' ', '-')\r\n        );\r\n        getPokemon(\r\n        searchId, \r\n        () => {\r\n            // Removes any error status current active and enables\r\n            // the loading screen\r\n            set_isLoading(true);\r\n            set_hasError({...hasError, minor: false});\r\n        }, \r\n        (data) => {\r\n            // Clear the current Pokémon object and reset the evolution\r\n            // pointer to the first evolution\r\n            set_pokemonInfo(defaultPokemonState);\r\n            set_evolutionNav(0);\r\n\r\n            set_pokemonInfo({ \r\n                name: data.getDisplayName(), \r\n                image: data.getImage(), \r\n                entries: data.getAllPokedexEntries(), \r\n                moves: data.getMoves(), \r\n                hasPreEvolution: data.hasPreEvolution(), \r\n                hasEvolution: data.hasEvolution(), \r\n                preEvolution: data.getPreEvolution(), \r\n                evolution: data.getEvolutions(), \r\n                types: data.getTypes(), \r\n                evolution_method: data.getEvolutionTriggers(),\r\n                stats: data.getStats(),\r\n                minor: {\r\n                    height: (data._info.pokemon.height / 10) + ' m',\r\n                    weight: (data._info.pokemon.weight / 10) + ' kg',\r\n                    shape: capitalizeAllWords(\r\n                        replaceAll(data._info.species.shape.name, '-', ' ')\r\n                    ),\r\n                    generation: capitalizeAllWords(\r\n                        replaceAll(data._info.species.generation.name, '-', ' ')\r\n                    ),\r\n                    habitat: (\r\n                    !(data._info.species.habitat === null) ? \r\n                    capitalizeAllWords(replaceAll(data._info.species.habitat.name, '-', ' ')) \r\n                    : null\r\n                    ),\r\n                }\r\n            });\r\n\r\n            // Finish loading\r\n            set_isLoading(false);\r\n        },\r\n        (err) => {\r\n            // Finish loading and enables the error screen\r\n            set_isLoading(false);\r\n            set_hasError({...hasError, minor: true});\r\n            console.log(err);\r\n        });\r\n    }\r\n\r\n    // Renders the Pokemon Basic Info on the page\r\n    function pokemonBasicInfo(condition) {\r\n        // Renders a box containing the Pokémon image and type symbol(s)\r\n        function basic_pokemonImageBox() {\r\n            return (\r\n                <div className='imageBox'>\r\n                    <img src={pokemonInfo.image} alt={pokemonInfo.name}/>\r\n                    <div className={pokemonInfo.types.length > 1 ? 'twoTypes' : 'oneType'}>\r\n                    {\r\n                        pokemonInfo.types.map((v, i) => {\r\n                            // For each type of this Pokémon, render one Type Symbol image\r\n                            return (\r\n                                <img src={v.img} alt={v.name} key={`${v.name}_${i}`}></img>\r\n                            )\r\n                        })\r\n                    }\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        // Renders a box containing all flavor texts for this Pokémon\r\n        function basic_flavorTextArea() {\r\n            return (\r\n                <div className='flavorTextArea'>\r\n                    <div className='flavorTexts'>\r\n                        {\r\n                        // Renders all the flavor texts for the current Pokémon\r\n                        pokemonInfo.entries.map((v, i) => <p key={`flavor_text_${i}`}>{v}</p>)\r\n                        }\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n\r\n        return ( \r\n            condition ?\r\n                <div className='pokemonBasic'>    \r\n                    <h1 className='pokemonName'>{pokemonInfo.name}</h1>\r\n                    { basic_pokemonImageBox() }\r\n                    { basic_flavorTextArea() }\r\n                </div>\r\n            : null\r\n        );\r\n    }\r\n\r\n    // Renders an area full of InfoBox containing various informations\r\n    function pokemonDetails(condition) {\r\n        // Renders a InfoBox component\r\n        function details_renderInfoBox(condition = true, title = '', className = '', content) {\r\n            return (\r\n                condition ?\r\n                <InfoBox\r\n                title={title}\r\n                className={className}\r\n                content={content}\r\n                />\r\n                : null\r\n            )\r\n        }\r\n\r\n        // Renders an InfoBox containing a table of stats\r\n        function details_baseStats() {\r\n            function content() {\r\n                return (\r\n                    <div className='stats'>\r\n                        <table className='statsTable'>\r\n                            <tbody>\r\n                                {pokemonInfo.stats.map((v) => {\r\n                                    // For each stat create a new table row\r\n                                    return (\r\n                                        <tr key={v.name + '_stat'}>\r\n                                            <th className='statName'>{v.name}</th>\r\n                                            <th className='statVal'>{v.value}</th>\r\n                                        </tr>\r\n                                    ) \r\n                                })}\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return details_renderInfoBox(\r\n                true,\r\n                'Base Stats:',\r\n                '',\r\n                content()\r\n            )\r\n        }\r\n\r\n        // Renders an InfoBox containing a table of misc information\r\n        function details_about() {\r\n            function content() {\r\n                return (\r\n                    <div className='pokemonDetails'>\r\n                        <table className='detailsTable'>\r\n                            <tbody>\r\n                                    <tr>\r\n                                        <th className='statName'>\r\n                                        {pokemonInfo.types.length === 1 ? \"Type:\" : \"Types:\"}\r\n                                        </th>\r\n                                        <th className='statVal'>{pokemonInfo.types.length === 1 ? \r\n                                        capitalizeString(pokemonInfo.types[0].name) : \r\n                                        capitalizeString(pokemonInfo.types[0].name) \r\n                                        + ' & ' + \r\n                                        capitalizeString(pokemonInfo.types[1].name)}\r\n                                        </th>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <th className='statName'>Height:</th>\r\n                                        <th className='statVal'>{pokemonInfo.minor.height}</th>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <th className='statName'>Weight:</th>\r\n                                        <th className='statVal'>{pokemonInfo.minor.weight}</th>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <th className='statName'>Shape:</th>\r\n                                        <th className='statVal'>{pokemonInfo.minor.shape}</th>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <th className='statName'>Generation:</th>\r\n                                        <th className='statVal'>{pokemonInfo.minor.generation}</th>\r\n                                    </tr>\r\n                                    <tr> \r\n                                        <th className='statName'>Habitat:</th>\r\n                                        <th className='statVal'>{pokemonInfo.minor.habitat}</th>\r\n                                    </tr>\r\n                            </tbody>\r\n                        </table>\r\n                    </div> \r\n                )\r\n            }\r\n\r\n            return details_renderInfoBox(\r\n                true,\r\n                `About This Pokemon:`,\r\n                '',\r\n                content()\r\n            );\r\n        }\r\n\r\n        // Renders an InfoBox containing the Pokémon that evolves to this one,\r\n        // if there isn't any, it won't render anythig\r\n        function details_evolvesFrom() {\r\n            function content() {\r\n                return (\r\n                    <div className='preEvolution'>\r\n                        <h4>\r\n                        {\r\n                        `${capitalizeAllWords(pokemonInfo.preEvolution.name)}`+\r\n                        ` (${pokemonInfo.preEvolution.id})`\r\n                        }\r\n                        </h4>\r\n                        <div className='imageBox'>\r\n                            <img \r\n                            src={pokemonInfo.preEvolution.img} \r\n                            alt={pokemonInfo.preEvolution.name}\r\n                            />\r\n                        </div>\r\n                        <button \r\n                        onClick={() => {searchPokemon(pokemonInfo.preEvolution.id.toString())}}\r\n                        >View More</button>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return details_renderInfoBox(\r\n                pokemonInfo.hasPreEvolution,\r\n                'Evolves From:',\r\n                !pokemonInfo.hasEvolution ? 'doubleSpace' : '',\r\n                pokemonInfo.hasPreEvolution ? content() : null\r\n            )\r\n        }\r\n\r\n        // Renders an InfoBox containing the Pokémons that evolves from this one,\r\n        // if there isn't any, it won't show anything, if there is more than one,\r\n        // it will render NavArrowButtons to change the current content to another\r\n        // Pokémon that also evolves from this one.\r\n        function details_evolvesTo() {\r\n            function content() {\r\n                return (\r\n                    <div className='evolution'>\r\n                        {pokemonInfo.evolution.length > 1 ? \r\n                            <NavArrowButton\r\n                            modifier={-1}\r\n                            currentValue={evolutionNav}\r\n                            set={set_evolutionNav}\r\n                            limitValue={0}\r\n                            />\r\n                        : null}\r\n\r\n                        <div className='evolutionContent'>\r\n                            <h4>{\r\n                            `${capitalizeString(pokemonInfo.evolution[evolutionNav].name)}`+\r\n                            ` (${pokemonInfo.evolution[evolutionNav].id})`\r\n                            }</h4>\r\n                            <div className='imageBox'>\r\n                                <img \r\n                                src={pokemonInfo.evolution[evolutionNav].img} \r\n                                alt={pokemonInfo.evolution[evolutionNav].name}/>\r\n                            </div>\r\n                            <button \r\n                            onClick={() => {\r\n                                searchPokemon(pokemonInfo.evolution[evolutionNav].id.toString())\r\n                            }}\r\n                            >View More</button>\r\n                        </div>\r\n                                \r\n                        {pokemonInfo.evolution.length > 1 ? \r\n                            <NavArrowButton\r\n                            currentValue={evolutionNav}\r\n                            set={set_evolutionNav}\r\n                            limitValue={pokemonInfo.evolution.length - 1}\r\n                            />\r\n                        : null}\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return details_renderInfoBox(\r\n                pokemonInfo.hasEvolution,\r\n                'Evolves To:',\r\n                !pokemonInfo.hasPreEvolution ? 'doubleSpace' : '',\r\n                pokemonInfo.hasEvolution ? content() : null\r\n            );\r\n        }\r\n\r\n        // Renders an InfoBox containing a guide on how to evolve this Pokémon,\r\n        // if there isn't any evolution, it won't show anything, if there is more\r\n        // than one it will render NavArrowButtons to change the current content\r\n        // to another Pokémon that also evolves from this one.\r\n        function details_evolutionGuide() {\r\n            function content() {\r\n                return (\r\n                    <div className='evolutionGuide'>\r\n                        {pokemonInfo.evolution.length > 1 ? \r\n                            <NavArrowButton\r\n                            modifier={-1}\r\n                            currentValue={evolutionNav}\r\n                            set={set_evolutionNav}\r\n                            limitValue={0}\r\n                            />\r\n                        : null}\r\n\r\n                        <div className='evolutionGuideContent'>\r\n                            <h4>{\r\n                            `${capitalizeAllWords(pokemonInfo.name.split(' ').slice(0, -1).join(' '))}`+ \r\n                            `  >  ${capitalizeAllWords(pokemonInfo.evolution[evolutionNav].name)}`\r\n                            }</h4>\r\n                            <div className='evolutionMethods'>\r\n                                {\r\n                                    pokemonInfo.evolution_method[\r\n                                        pokemonInfo.evolution[evolutionNav].name.toLowerCase()\r\n                                    ].map((v, i) => {\r\n                                        return <p key={`evo_guide_${i}`}>{v}</p>\r\n                                    })\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                            \r\n                        {pokemonInfo.evolution.length > 1 ? \r\n                            <NavArrowButton\r\n                            currentValue={evolutionNav}\r\n                            set={set_evolutionNav}\r\n                            limitValue={pokemonInfo.evolution.length - 1}\r\n                            />\r\n                        : null}\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return details_renderInfoBox(\r\n                pokemonInfo.hasEvolution,\r\n                'How to Evolve:',\r\n                'doubleSpace',\r\n                pokemonInfo.hasEvolution ? content() : null\r\n            );\r\n        }\r\n\r\n        return (\r\n            condition ? \r\n            <div className='pokemonOtherInfo'>\r\n                { details_baseStats() }\r\n                { details_about() }\r\n                { details_evolvesFrom() }\r\n                { details_evolvesTo() }\r\n                { details_evolutionGuide() }\r\n            </div>\r\n            : null\r\n        );\r\n    }\r\n\r\n    function pokemonMoveList(condition) {\r\n\r\n        function move_navigation() {\r\n            return (\r\n                <div className='moveNavigation'>\r\n                    <DropdownInput \r\n                        label='Game'\r\n                        keyPrefix='game_id'\r\n                        setValue={set_gameSelectValue}\r\n                        value={gameSelectValue}\r\n                        choices={Object.keys(pokemonInfo.moves)}\r\n                    />\r\n                </div>\r\n            );\r\n        }\r\n\r\n        function move_moveList() {\r\n\r\n            function move_list_levelUpCategory() {\r\n                function move_list_level_moveBox(move, index) {\r\n                    return (\r\n                        <div \r\n                        className='moveBox' \r\n                        key={\r\n                        `${replaceAll(move.name.toLowerCase(), ' ', '_')}_${index}`\r\n                        }\r\n                        >\r\n                            {move.level > 0 ?\r\n                                <div className='levelBox'>\r\n                                    <p>{move.level}</p>\r\n                                </div>\r\n                            : null}\r\n                            <p>{move.name}</p>\r\n                        </div>\r\n                    );\r\n                }\r\n\r\n                return Object.keys(pokemonInfo.moves[gameSelectValue])\r\n                .map((v, i) => {\r\n                    if(v === \"Level Up\") {\r\n                        return (\r\n                            <div \r\n                            className='moveCategory' \r\n                            key={`${replaceAll(v.toLowerCase(), ' ', '-')}_${i}`}\r\n                            >\r\n                                <h2>{v}</h2>\r\n                                {\r\n                                    // Renders a levelMoveBox for all the moves in the Lavel Up category\r\n                                    // for the game that is currently selected in the dropdown field\r\n                                    pokemonInfo.moves[gameSelectValue][v].map((v, i) => {\r\n                                        return (\r\n                                            move_list_level_moveBox(v, i)\r\n                                        )\r\n                                    })\r\n                                }\r\n                            </div>\r\n                        )\r\n                    }\r\n                });\r\n            }\r\n\r\n            function move_list_otherCategories() {\r\n                function move_list_other_moveBox(move, index) {\r\n                    return (\r\n                        <div \r\n                        className='moveBox' \r\n                        key={\r\n                        `${replaceAll(move.name.toLowerCase(), ' ', '_')}_${index}`\r\n                        }\r\n                        >\r\n                            <p>{move.name}</p>\r\n                        </div>\r\n                    );\r\n                }\r\n\r\n                return Object.keys(pokemonInfo.moves[gameSelectValue])\r\n                .map((v, i) => {\r\n                    if(v !== \"Level Up\") {\r\n                        return (\r\n                            <div \r\n                            className='moveCategory' \r\n                            key={`${replaceAll(v.toLowerCase(), ' ', '-')}_${i}`}\r\n                            >\r\n                                <h2>{v}</h2>\r\n                                {\r\n                                    pokemonInfo.moves[gameSelectValue][v].map((v, i) => {\r\n                                        return (\r\n                                            // Renders a moveBox for all the moves in all categories (except\r\n                                            // the Level Up category) for the game that is currently\r\n                                            move_list_other_moveBox(v, i)\r\n                                        )\r\n                                    })\r\n                                }\r\n                            </div>\r\n                        )\r\n                    }\r\n                });\r\n            }\r\n\r\n            return (\r\n                <div className='moves'>\r\n                { move_list_levelUpCategory() }\r\n                { move_list_otherCategories() }\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            condition ?\r\n            <div className='moveList'>\r\n                { move_navigation() }\r\n                {gameSelectValue !== '' && !!pokemonInfo.moves[gameSelectValue] ?\r\n                    move_moveList()\r\n                : null }\r\n            </div>\r\n            : null\r\n        )\r\n    }\r\n\r\n    function pokemonSearchBar(conditionToShow = true, conditionToWork = true) {\r\n        return (\r\n            conditionToShow ?\r\n            <div className='searchBarArea'>\r\n                <SearchBar \r\n                label='Type the Pokemon name or number'\r\n                buttonText=\"Search\"\r\n                onclick={conditionToWork ? searchPokemon : () => {}}\r\n                />\r\n            </div>\r\n            : null\r\n        );\r\n    }\r\n\r\n    function loading() {\r\n        return (\r\n        <LoadingScreen \r\n        evalFunction={() => {return isLoading}}\r\n        />\r\n        )\r\n    }\r\n\r\n    function error() {\r\n        let errMessage = \"Oops, couldn't find that Pokémon.\"\r\n\r\n        if(hasError.major) {\r\n            errMessage = \"Fatal error, too bad :P\"\r\n        }\r\n\r\n        return (\r\n            <ErrorScreen\r\n            evalFunction={() => {return hasError.minor || hasError.major}}\r\n            message={errMessage}\r\n            />\r\n        )\r\n    }\r\n\r\n    // Pokedex main renderer\r\n    return (\r\n        <div className=\"Pokedex\">\r\n            { pokemonBasicInfo(pokemonInfo.name !== '' && !isLoading && !hasError.minor && !hasError.major) }\r\n            { pokemonDetails(pokemonInfo.name !== '' && !isLoading && !hasError.minor && !hasError.major) }\r\n            { pokemonMoveList(pokemonInfo.name !== '' && !isLoading && !hasError.minor && !hasError.major) }\r\n            { pokemonSearchBar(true, !hasError.major) }\r\n            { loading() }\r\n            { error() }\r\n        </div>\r\n    );\r\n}","//================================================================================\n// External:\n//================================================================================\nimport React from 'react';\n\n//================================================================================\n// Pages:                                                                         \n//================================================================================\nimport Pokedex from './Pages/Pokedex.js';\n\nfunction App() {\n  return (\n    <div className='App'>\n      <Pokedex />\n    </div>\n  );\n}\n\n//================================================================================\n// Exports:                                                                       \n//================================================================================\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}